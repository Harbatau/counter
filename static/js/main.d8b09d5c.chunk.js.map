{"version":3,"sources":["components/counterDisplay.jsx","components/buttons.jsx","redux/reducer.js","components/counter.jsx","components/SettingsInput.jsx","components/Settings.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["ConnectedCounterDisplay","connect","state","isFirstVersion","maxValue","maxCounter","minValue","minCounter","counterNumber","counter","props","svgClass","alertMonitor","className","viewBox","id","textAnchor","x","y","xlinkHref","ControlButton","onClick","onClickHandler","disabled","disableMonitor","buttonProperty","RESET","initialState","isSettingButtonNotReady","isNumberValuesNotValid","minInput","inputValue","lastRealValue","isInputFocused","isValueEqualToCurrentSetting","maxInput","isSettingsOpened","reducer","action","type","event","currentTarget","value","newMinState","newMaxState","currentMinValue","currentMaxValue","ConnectedCounter","dispatch","openAndCloseSettings","increment","reset","SettingsInput","isFocused","data","isEqual","valueName","inputName","realValue","labelContent","onFocus","focus","onBlur","blur","onChange","change","htmlFor","ConnectedSettings","setValues","updateValuesFromMin","e","updateValuesFromMax","onBlurMinHandler","onBlurMaxHandler","onFocusMinHandler","onFocusMaxHandler","alertMessage","ConnectedApp","switchVersion","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8b09d5c.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Assets/App.sass';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CounterDisplay = (props) => {\r\n\r\n    let svgClass = props.alertMonitor ? 'text-copy' : 'text-copy-alert';\r\n\r\n    return (\r\n        <div className={'counterDisplay'}>\r\n            <div className={props.alertMonitor ? 'number' : 'number alertNumber'}>\r\n                {props.isFirstVersion ? props.counterNumber :\r\n                    <svg viewBox=\"0 0 960 600\">\r\n                        <symbol id=\"s-text\">\r\n                            <text textAnchor=\"middle\" x=\"50%\" y=\"80%\">{props.counterNumber}</text>\r\n                        </symbol>\r\n                        <g className=\"g-ants\">\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                        </g>\r\n                    </svg>}\r\n            </div>\r\n            <div className={'flex'}>\r\n               <div className={'currentSettings'}>Current min value:\r\n                    <div className={'currSetVal'}>{props.minValue}</div>\r\n                </div>\r\n                <div className={'currentSettings'}>Current max value:\r\n                    <div className={'currSetVal'}>{props.maxValue}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        maxValue: state.maxCounter,\r\n        minValue: state.minCounter,\r\n        counterNumber: state.counter\r\n    }\r\n};\r\n\r\nconst ConnectedCounterDisplay = connect(mapStateToProps, null)(CounterDisplay);\r\n\r\nexport default ConnectedCounterDisplay;","import React from 'react';\r\nimport '../Assets/App.sass';\r\n\r\nconst ControlButton = (props) => {\r\n    return(\r\n        <button onClick={props.onClickHandler} disabled={props.disableMonitor}>\r\n            {props.buttonProperty}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default ControlButton;","const INCREMENT = 'reducer/INCREMENT';\r\nconst RESET = 'reducer/RESET';\r\nconst SWITCH_VERSION = 'reducer/SWITCH_VERSION';\r\nconst OPEN_AND_CLOSE_SETTINGS = 'reducer/OPEN_AND_CLOSE_SETTINGS';\r\nconst SET_VALUES = 'reducer/SET_VALUES';\r\nconst UPDATE_VALUES_FROM_MIN = 'reducer/UPDATE_VALUES_FROM_MIN';\r\nconst UPDATE_VALUES_FROM_MAX = 'reducer/UPDATE_VALUES_FROM_MAX';\r\nconst ON_FOCUS_MIN = 'reducer/ON_FOCUS_MIN';\r\nconst ON_FOCUS_MAX = 'reducer/ON_FOCUS_MAX';\r\nconst ON_BLUR_MIN = 'reducer/ON_BLUR_MIN';\r\nconst ON_BLUR_MAX = 'reducer/ON_BLUR_MAX';\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    minCounter: 0,\r\n    maxCounter: 99,\r\n    isSettingButtonNotReady: true,\r\n    isNumberValuesNotValid: false,\r\n    minInput: {\r\n        inputValue: '0',\r\n        lastRealValue: '0',\r\n        isInputFocused: false,\r\n        isValueEqualToCurrentSetting: true\r\n    },\r\n    maxInput: {\r\n        inputValue: '99',\r\n        lastRealValue: '99',\r\n        isInputFocused: false,\r\n        isValueEqualToCurrentSetting: true\r\n    },\r\n    isFirstVersion: true,\r\n    isSettingsOpened: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT:\r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            };\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                counter: +state.minCounter\r\n            };\r\n        case SWITCH_VERSION:\r\n            return {\r\n                ...state,\r\n                isFirstVersion: !state.isFirstVersion\r\n            };\r\n        case OPEN_AND_CLOSE_SETTINGS:\r\n            if (state.isSettingsOpened) {\r\n                return {\r\n                    ...state,\r\n                    isSettingsOpened: !state.isSettingsOpened,\r\n                    minInput: {\r\n                        ...state.minInput,\r\n                        inputValue: `${state.minCounter}`,\r\n                        lastRealValue: `${state.minCounter}`,\r\n                        isInputFocused: false,\r\n                        isValueEqualToCurrentSetting: true\r\n                    },\r\n                    maxInput: {\r\n                        ...state.maxInput,\r\n                        inputValue: `${state.maxCounter}`,\r\n                        lastRealValue: `${state.maxCounter}`,\r\n                        isInputFocused: false,\r\n                        isValueEqualToCurrentSetting: true\r\n                    }\r\n                }\r\n            } else return {\r\n                ...state,\r\n                isSettingsOpened: !state.isSettingsOpened,\r\n            };\r\n        case SET_VALUES:\r\n            return {\r\n                ...state,\r\n                counter: state.minInput.inputValue === '' ? +state.minInput.lastRealValue : +state.minInput.inputValue,\r\n                minCounter: state.minInput.inputValue === '' ? +state.minInput.lastRealValue : +state.minInput.inputValue,\r\n                maxCounter: state.maxInput.inputValue === '' ? +state.maxInput.lastRealValue : +state.maxInput.inputValue,\r\n                isSettingButtonNotReady: true,\r\n                minInput: {...state.minInput, isValueEqualToCurrentSetting: true},\r\n                maxInput: {...state.maxInput, isValueEqualToCurrentSetting: true},\r\n                isSettingsOpened: !state.isFirstVersion ? false : state.isSettingsOpened\r\n            };\r\n        case UPDATE_VALUES_FROM_MIN:\r\n            let minValue = action.event.currentTarget.value;\r\n            if (+minValue > 999) return state;\r\n            let newMinState = {...state, minInput: {...state.minInput, inputValue: minValue}};\r\n            if ((state.minCounter === +minValue &&\r\n                state.maxCounter === +state.maxInput.lastRealValue) ||\r\n                (minValue === '' && (+state.minInput.lastRealValue === state.minCounter))) {\r\n                newMinState = {...newMinState, isSettingButtonNotReady: true}\r\n            } else newMinState = {...newMinState, isSettingButtonNotReady: false};\r\n            if (+state.maxInput.lastRealValue <= +minValue || +minValue < 0) {\r\n                newMinState = {...newMinState, isNumberValuesNotValid: true}\r\n            } else newMinState = {...newMinState, isNumberValuesNotValid: false};\r\n            if (+minValue === state.minCounter ||\r\n                (minValue === '' && (+state.minInput.lastRealValue === state.minCounter))) {\r\n                newMinState = {\r\n                    ...newMinState,\r\n                    minInput: {\r\n                        ...newMinState.minInput,\r\n                        isValueEqualToCurrentSetting: true\r\n                    }\r\n                };\r\n            } else newMinState = {\r\n                ...newMinState,\r\n                minInput: {\r\n                    ...newMinState.minInput,\r\n                    isValueEqualToCurrentSetting: false\r\n                }\r\n            };\r\n            return newMinState;\r\n        case UPDATE_VALUES_FROM_MAX:\r\n            let maxValue = action.event.currentTarget.value;\r\n            if (+maxValue > 999) return state;\r\n            let newMaxState = {...state, maxInput: {...state.maxInput, inputValue: maxValue}};\r\n            if ((state.maxCounter === +maxValue &&\r\n                state.minCounter === +state.minInput.lastRealValue) ||\r\n                (maxValue === '' && (+state.maxInput.lastRealValue === state.maxCounter))) {\r\n                newMaxState = {...newMaxState, isSettingButtonNotReady: true}\r\n            } else newMaxState = {...newMaxState, isSettingButtonNotReady: false};\r\n            if (+maxValue <= +state.minInput.lastRealValue || +maxValue < 0) {\r\n                newMaxState = {...newMaxState, isNumberValuesNotValid: true}\r\n            } else newMaxState = {...newMaxState, isNumberValuesNotValid: false};\r\n            if (+maxValue === state.maxCounter ||\r\n                (maxValue === '' && (+state.maxInput.lastRealValue === state.maxCounter))) {\r\n                newMaxState = {\r\n                    ...newMaxState,\r\n                    maxInput: {\r\n                        ...newMaxState.maxInput,\r\n                        isValueEqualToCurrentSetting: true\r\n                    }\r\n                };\r\n            } else newMaxState = {\r\n                ...newMaxState,\r\n                maxInput: {\r\n                    ...newMaxState.maxInput,\r\n                    isValueEqualToCurrentSetting: false\r\n                }\r\n            };\r\n            return newMaxState;\r\n        case ON_FOCUS_MIN:\r\n            return {\r\n                ...state,\r\n                minInput: {\r\n                    ...state.minInput,\r\n                    inputValue: '',\r\n                    isInputFocused: true\r\n                }\r\n            };\r\n        case ON_FOCUS_MAX:\r\n            return {\r\n                ...state,\r\n                maxInput: {\r\n                    ...state.maxInput,\r\n                    inputValue: '',\r\n                    isInputFocused: true\r\n                }\r\n            };\r\n        case ON_BLUR_MIN:\r\n            let currentMinValue = state.minInput.inputValue;\r\n            if (currentMinValue === '') {\r\n                return {\r\n                    ...state,\r\n                    minInput: {\r\n                        ...state.minInput,\r\n                        isInputFocused: false\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    minInput: {\r\n                        ...state.minInput,\r\n                        lastRealValue: currentMinValue,\r\n                        isInputFocused: false,\r\n                    }\r\n                }\r\n            }\r\n        case ON_BLUR_MAX:\r\n            let currentMaxValue = state.maxInput.inputValue;\r\n            if (currentMaxValue === '') {\r\n                return {\r\n                    ...state,\r\n                    maxInput: {\r\n                        ...state.maxInput,\r\n                        isInputFocused: false\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    maxInput: {\r\n                        ...state.maxInput,\r\n                        lastRealValue: currentMaxValue,\r\n                        isInputFocused: false,\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const incrementAC = () => {\r\n    return {type: INCREMENT}\r\n};\r\nexport const resetAC = () => {\r\n    return {type: RESET}\r\n};\r\nexport const switchVersionAC = () => {\r\n    return {type: SWITCH_VERSION}\r\n};\r\nexport const openAndCloseSettingsAC = () => {\r\n    return {type: OPEN_AND_CLOSE_SETTINGS}\r\n};\r\nexport const setValuesAC = () => {\r\n    return {type: SET_VALUES}\r\n};\r\nexport const updateValuesFromMinAC = (event) => {\r\n    return {type: UPDATE_VALUES_FROM_MIN, event}\r\n};\r\nexport const updateValuesFromMaxAC = (event) => {\r\n    return {type: UPDATE_VALUES_FROM_MAX, event}\r\n};\r\nexport const onFocusMinAC = () => {\r\n    return {type: ON_FOCUS_MIN}\r\n};\r\nexport const onFocusMaxAC = () => {\r\n    return {type: ON_FOCUS_MAX}\r\n};\r\nexport const onBlurMinAC = () => {\r\n    return {type: ON_BLUR_MIN}\r\n};\r\nexport const onBlurMaxAC = () => {\r\n    return {type: ON_BLUR_MAX}\r\n};\r\n\r\n\r\nexport default reducer;","import React from 'react';\r\nimport '../Assets/App.sass';\r\nimport CounterDisplay from \"./counterDisplay\";\r\nimport ControlButton from \"./buttons\";\r\nimport {incrementAC, openAndCloseSettingsAC, resetAC} from \"../redux/reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n        <>\r\n            <div className={!props.isFirstVersion && props.isSettingsOpened ? 'counter displayNone' : 'counter'}>\r\n                <CounterDisplay counterNumber={props.counterNumber} maxValue={props.maxValue} minValue={props.minValue}\r\n                                alertMonitor={props.counterNumber !== props.maxValue} isFirstVersion={props.isFirstVersion}/>\r\n                <div className={'counterButtons'}>\r\n                    <ControlButton buttonProperty={'increment'} onClickHandler={props.increment}\r\n                                   disableMonitor={props.counterNumber === props.maxValue}/>\r\n                    <ControlButton buttonProperty={'reset'} onClickHandler={props.reset}\r\n                                   disableMonitor={props.counterNumber === props.minValue}/>\r\n                    {!props.isFirstVersion &&\r\n                    <ControlButton buttonProperty={'Settings'} onClickHandler={props.openAndCloseSettings}/>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        isSettingsOpened: state.isSettingsOpened,\r\n        maxValue: state.maxCounter,\r\n        minValue: state.minCounter,\r\n        counterNumber: state.counter\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        openAndCloseSettings: () => {\r\n            const action = openAndCloseSettingsAC();\r\n            dispatch(action)\r\n        },\r\n        increment: () => {\r\n            const action = incrementAC();\r\n            dispatch(action)\r\n        },\r\n        reset: () => {\r\n            const action = resetAC();\r\n            dispatch(action)\r\n        },\r\n    }\r\n};\r\n\r\nconst ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n\r\nexport default ConnectedCounter;\r\n","import React from 'react';\r\nimport '../Assets/App.sass';\r\n\r\nconst SettingsInput = (props) => {\r\n\r\n    let isFocused = props.data.isInputFocused,\r\n        isEqual = props.data.isValueEqualToCurrentSetting,\r\n        valueName = props.inputName,\r\n        realValue = props.data.lastRealValue;\r\n\r\n    let labelContent = !isFocused && isEqual ? `Type ${valueName} here` : isEqual && isFocused &&\r\n    props.data.inputValue === realValue ?\r\n        `This ${valueName} is equal to current` : isFocused ? `${valueName}` : `${valueName} will be set: `;\r\n\r\n    return (\r\n        <div className={'inputContainer'}>\r\n            <input className={'optionsInput'} type={'number'}\r\n                   id={`${props.id}`}\r\n                   onFocus={props.focus}\r\n                   onBlur={props.blur}\r\n                   value={props.data.inputValue}\r\n                   onChange={props.change}\r\n            />\r\n            <label className={'inputName'} htmlFor={`${props.id}`}>\r\n                <div className={'labelWrapper'}>\r\n                    <span>{labelContent}</span>\r\n                    <span className={(props.data.isInputFocused || props.data.isValueEqualToCurrentSetting) ?\r\n                        'displayNone lastRealValue' : 'lastRealValue'}>\r\n                        {props.data.lastRealValue}\r\n                    </span>\r\n                </div>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsInput;","import React from 'react';\r\nimport '../Assets/App.sass';\r\nimport ControlButton from \"./buttons\";\r\nimport SettingsInput from \"./SettingsInput\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    onBlurMaxAC,\r\n    onBlurMinAC, onFocusMaxAC, onFocusMinAC,\r\n    openAndCloseSettingsAC,\r\n    setValuesAC,\r\n    updateValuesFromMaxAC,\r\n    updateValuesFromMinAC\r\n} from \"../redux/reducer\";\r\n\r\nconst Settings = (props) => {\r\n\r\n    let alertMessage = +props.maxInput.inputValue < 0 || props.minInput.inputValue < 0 ? `! values can't be less than zero !` :\r\n        (props.maxInput.inputValue || props.maxInput.lastRealValue) === (props.minInput.inputValue || props.minInput.lastRealValue) ? `! values can't be equal !` :\r\n            +props.maxInput.inputValue < props.minInput.inputValue || +props.maxInput.lastRealValue < props.minInput.inputValue ||\r\n            +props.maxInput.inputValue < props.minInput.lastRealValue ? `! minValue can't be greater than maxValue !` : false;\r\n\r\n    return (\r\n        <div className={props.isFirstVersion || (props.isSettingsOpened && !props.isFirstVersion) ?\r\n            'settings' : 'settings displayNone'}>\r\n            <div className={'settingsInputs'}>\r\n                <SettingsInput blur={props.onBlurMinHandler}\r\n                               data={props.minInput} inputName={'min value'}\r\n                               id={'minInput'}\r\n                               change={(e) => {\r\n                                   props.updateValuesFromMin(e)\r\n                               }}\r\n                               focus={props.onFocusMinHandler}\r\n                               isFirstVersion={props.isFirstVersion}\r\n                />\r\n                <SettingsInput blur={props.onBlurMaxHandler}\r\n                               data={props.maxInput} inputName={'max value'}\r\n                               id={'maxInput'}\r\n                               change={(e) => {\r\n                                   props.updateValuesFromMax(e)\r\n                               }}\r\n                               focus={props.onFocusMaxHandler}\r\n                               isFirstVersion={props.isFirstVersion}\r\n                />\r\n            </div>\r\n            <div className={'counterButtons'}>\r\n                <ControlButton onClickHandler={props.setValues}\r\n                               buttonProperty={'set options'}\r\n                               disableMonitor={props.isSettingButtonNotReady || props.isNumberValuesNotValid}\r\n                />\r\n                {!props.isFirstVersion &&\r\n                <ControlButton onClickHandler={props.openAndCloseSettings} buttonProperty={'cancel'}/>}\r\n            </div>\r\n            <div className={props.isNumberValuesNotValid ? 'alertMessage' : 'alertMessage opacityZero'}>\r\n                {alertMessage}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        isSettingsOpened: state.isSettingsOpened,\r\n        isSettingButtonNotReady: state.isSettingButtonNotReady,\r\n        isNumberValuesNotValid: state.isNumberValuesNotValid,\r\n        minInput: state.minInput,\r\n        maxInput: state.maxInput,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        openAndCloseSettings: () => {\r\n            const action = openAndCloseSettingsAC();\r\n            dispatch(action)\r\n        },\r\n        setValues: () => {\r\n            const action = setValuesAC();\r\n            dispatch(action)\r\n        },\r\n        updateValuesFromMin: (e) => {\r\n            const action = updateValuesFromMinAC(e);\r\n            dispatch(action)\r\n        },\r\n        updateValuesFromMax: (e) => {\r\n            const action = updateValuesFromMaxAC(e);\r\n            dispatch(action)\r\n        },\r\n        onBlurMinHandler: () => {\r\n            const action = onBlurMinAC();\r\n            dispatch(action)\r\n        },\r\n        onBlurMaxHandler: () => {\r\n            const action = onBlurMaxAC();\r\n            dispatch(action)\r\n        },\r\n        onFocusMinHandler: () => {\r\n            const action = onFocusMinAC();\r\n            dispatch(action)\r\n        },\r\n        onFocusMaxHandler: () => {\r\n            const action = onFocusMaxAC();\r\n            dispatch(action)\r\n        },\r\n    }\r\n};\r\n\r\nconst ConnectedSettings = connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n\r\nexport default ConnectedSettings;","import React from 'react';\r\nimport './Assets/App.sass';\r\nimport Counter from \"./components/counter\";\r\nimport Settings from \"./components/Settings\";\r\nimport {connect} from \"react-redux\";\r\nimport {switchVersionAC} from \"./redux/reducer\";\r\n\r\nconst App = (props) => {\r\n\r\n    const setUnitToCounter = () => {\r\n        this.setState({counter: this.state.counter + 1});\r\n    };\r\n\r\n    const reset = () => {\r\n        this.setState({counter: this.state.minCounter})\r\n    };\r\n\r\n    const setValues = () => {\r\n        this.setState({\r\n            counter: this.state.minInput.inputValue === '' ? +this.state.minInput.lastRealValue : +this.state.minInput.inputValue,\r\n            minCounter: this.state.minInput.inputValue === '' ? +this.state.minInput.lastRealValue : +this.state.minInput.inputValue,\r\n            maxCounter: this.state.maxInput.inputValue === '' ? +this.state.maxInput.lastRealValue : +this.state.maxInput.inputValue,\r\n            isSettingButtonNotReady: true,\r\n            minInput: {...this.state.minInput, isValueEqualToCurrentSetting: true},\r\n            maxInput: {...this.state.maxInput, isValueEqualToCurrentSetting: true}\r\n        });\r\n        if (!this.state.isFirstVersion) this.setState({isSettingsOpened: false});\r\n    };\r\n\r\n    const updateValuesFromInputs = (e, input) => {\r\n        let value = e.currentTarget.value;\r\n        if (+value > 999) return;\r\n        switch (input) {\r\n            case 'maxInput':\r\n                this.setState({maxInput: {...this.state.maxInput, inputValue: value}});\r\n                if ((this.state.maxCounter === +value &&\r\n                    this.state.minCounter === +this.state.minInput.lastRealValue) ||\r\n                    (value === '' && (+this.state.maxInput.lastRealValue === this.state.maxCounter))) {\r\n                    this.setState({isSettingButtonNotReady: true})\r\n                } else this.setState({isSettingButtonNotReady: false});\r\n                if (+value <= +this.state.minInput.lastRealValue || +value < 0) {\r\n                    this.setState({isNumberValuesNotValid: true})\r\n                } else this.setState({isNumberValuesNotValid: false});\r\n                if (+value === this.state.maxCounter ||\r\n                    (value === '' && (+this.state.maxInput.lastRealValue === this.state.maxCounter))) {\r\n                    this.setState({\r\n                        maxInput: {\r\n                            ...this.state.maxInput,\r\n                            inputValue: value,\r\n                            isValueEqualToCurrentSetting: true\r\n                        }\r\n                    });\r\n                } else this.setState({\r\n                    maxInput: {\r\n                        ...this.state.maxInput,\r\n                        inputValue: value,\r\n                        isValueEqualToCurrentSetting: false\r\n                    }\r\n                });\r\n                break;\r\n            case 'minInput':\r\n                this.setState({minInput: {...this.state.minInput, inputValue: value}});\r\n                if ((this.state.minCounter === +value &&\r\n                    this.state.maxCounter === +this.state.maxInput.lastRealValue) ||\r\n                    (value === '' && (+this.state.minInput.lastRealValue === this.state.minCounter))) {\r\n                    this.setState({isSettingButtonNotReady: true})\r\n                } else this.setState({isSettingButtonNotReady: false});\r\n                if (+this.state.maxInput.lastRealValue <= +value || +value < 0) {\r\n                    this.setState({isNumberValuesNotValid: true})\r\n                } else this.setState({isNumberValuesNotValid: false});\r\n                if (+value === this.state.minCounter ||\r\n                    (value === '' && (+this.state.minInput.lastRealValue === this.state.minCounter))) {\r\n                    this.setState({\r\n                        minInput: {\r\n                            ...this.state.minInput,\r\n                            inputValue: value,\r\n                            isValueEqualToCurrentSetting: true\r\n                        }\r\n                    });\r\n                } else this.setState({\r\n                    minInput: {\r\n                        ...this.state.minInput,\r\n                        inputValue: value,\r\n                        isValueEqualToCurrentSetting: false\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    };\r\n\r\n    const onFocusHandler = (input) => {\r\n        switch (input) {\r\n            case 'maxInput':\r\n                this.setState({\r\n                    maxInput: {\r\n                        ...this.state.maxInput,\r\n                        inputValue: '',\r\n                        isInputFocused: true\r\n                    }\r\n                });\r\n                break;\r\n            case 'minInput':\r\n                this.setState({\r\n                    minInput: {\r\n                        ...this.state.minInput,\r\n                        inputValue: '',\r\n                        isInputFocused: true\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    };\r\n\r\n    const onBlurHandler = (input) => {\r\n        switch (input) {\r\n            case 'maxInput':\r\n                let maxValue = this.state.maxInput.inputValue;\r\n                if (maxValue === '') {\r\n                    this.setState({\r\n                        maxInput: {\r\n                            ...this.state.maxInput,\r\n                            isInputFocused: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        maxInput: {\r\n                            ...this.state.maxInput,\r\n                            lastRealValue: maxValue,\r\n                            isInputFocused: false,\r\n                        }\r\n                    })\r\n                }\r\n                break;\r\n            case 'minInput':\r\n                let minValue = this.state.minInput.inputValue;\r\n                if (minValue === '') {\r\n                    this.setState({\r\n                        minInput: {\r\n                            ...this.state.minInput,\r\n                            isInputFocused: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        minInput: {\r\n                            ...this.state.minInput,\r\n                            lastRealValue: minValue,\r\n                            isInputFocused: false,\r\n                        }\r\n                    })\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    const switchVersion = () => {\r\n        this.setState({isFirstVersion: !this.state.isFirstVersion});\r\n    };\r\n\r\n    const openAndCloseSettings = () => {\r\n        this.setState({isSettingsOpened: !this.state.isSettingsOpened})\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={props.isFirstVersion ? 'verSwitcher' : 'verSwitcher secondVersion'}\r\n                 onClick={props.switchVersion}>\r\n                <span className={'currentVersionIsOne'}>1st version</span>\r\n                <span className={'currentVersionIsTwo'}>2nd version</span>\r\n                <div className={'switcher'}/>\r\n            </div>\r\n            <div className={props.isFirstVersion ? 'App' : 'App secondVersionApp'}>\r\n                <div className={'absoluteWrapper'}>\r\n                    <div className={'theCounter'}>\r\n                        {!props.isSettingsOpened || props.isFirstVersion ? 'The Counter' : 'Settings'}\r\n                    </div>\r\n                    <div className={!props.isSettingsOpened ? 'wrapper' : 'wrapper settingsActive'}>\r\n                        <Counter />\r\n                        <Settings />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        isSettingsOpened: state.isSettingsOpened\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        switchVersion: () => {\r\n            const action = switchVersionAC();\r\n            dispatch(action)\r\n        },\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default ConnectedApp;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import reducer from \"./reducer\";\r\nimport {createStore} from \"redux\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}