{"version":3,"sources":["redux/reducer.js","components/Settings/VersionSwitcher.jsx","components/CounterBody/counterDisplay.jsx","components/CounterBody/buttons.jsx","components/CounterBody/counter.jsx","components/Settings/SettingsInput.jsx","components/Settings/Settings.jsx","components/CounterBody/MainCounter.jsx","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["RESET","initialState","counter","minCounter","maxCounter","isSettingButtonNotReady","isNumberValuesNotValid","minInput","inputValue","lastRealValue","isInputFocused","isValueEqualToCurrentSetting","maxInput","isFirstVersion","isSettingsOpened","reducer","state","action","type","minValue","event","currentTarget","value","newMinState","maxValue","newMaxState","currentMinValue","currentMaxValue","VersionSwitcher","props","className","onClick","switchVersion","ConnectedCounterDisplay","connect","counterNumber","svgClass","alertMonitor","viewBox","id","textAnchor","x","y","xlinkHref","ControlButton","onClickHandler","disabled","disableMonitor","buttonProperty","ConnectedCounter","dispatch","openAndCloseSettings","increment","reset","SettingsInput","isFocused","data","isEqual","valueName","inputName","realValue","labelContent","onFocus","focus","onBlur","blur","onChange","change","htmlFor","ConnectedSettings","setValues","updateValuesFromMin","e","updateValuesFromMax","onBlurMinHandler","onBlurMaxHandler","onFocusMinHandler","onFocusMaxHandler","alertMessage","MainCounter","ConnectedApp","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cfc6146.chunk.js","sourcesContent":["const INCREMENT = 'reducer/INCREMENT';\r\nconst RESET = 'reducer/RESET';\r\nconst SWITCH_VERSION = 'reducer/SWITCH_VERSION';\r\nconst OPEN_AND_CLOSE_SETTINGS = 'reducer/OPEN_AND_CLOSE_SETTINGS';\r\nconst SET_VALUES = 'reducer/SET_VALUES';\r\nconst UPDATE_VALUES_FROM_MIN = 'reducer/UPDATE_VALUES_FROM_MIN';\r\nconst UPDATE_VALUES_FROM_MAX = 'reducer/UPDATE_VALUES_FROM_MAX';\r\nconst ON_FOCUS_MIN = 'reducer/ON_FOCUS_MIN';\r\nconst ON_FOCUS_MAX = 'reducer/ON_FOCUS_MAX';\r\nconst ON_BLUR_MIN = 'reducer/ON_BLUR_MIN';\r\nconst ON_BLUR_MAX = 'reducer/ON_BLUR_MAX';\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    minCounter: 0,\r\n    maxCounter: 99,\r\n    isSettingButtonNotReady: true,\r\n    isNumberValuesNotValid: false,\r\n    minInput: {\r\n        inputValue: '0',\r\n        lastRealValue: '0',\r\n        isInputFocused: false,\r\n        isValueEqualToCurrentSetting: true\r\n    },\r\n    maxInput: {\r\n        inputValue: '99',\r\n        lastRealValue: '99',\r\n        isInputFocused: false,\r\n        isValueEqualToCurrentSetting: true\r\n    },\r\n    isFirstVersion: true,\r\n    isSettingsOpened: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INCREMENT:\r\n            return {\r\n                ...state,\r\n                counter: state.counter + 1\r\n            };\r\n        case RESET:\r\n            return {\r\n                ...state,\r\n                counter: +state.minCounter\r\n            };\r\n        case SWITCH_VERSION:\r\n            return {\r\n                ...state,\r\n                isFirstVersion: !state.isFirstVersion\r\n            };\r\n        case OPEN_AND_CLOSE_SETTINGS:\r\n            if (state.isSettingsOpened) {\r\n                return {\r\n                    ...state,\r\n                    isSettingsOpened: !state.isSettingsOpened,\r\n                    minInput: {\r\n                        ...state.minInput,\r\n                        inputValue: `${state.minCounter}`,\r\n                        lastRealValue: `${state.minCounter}`,\r\n                        isInputFocused: false,\r\n                        isValueEqualToCurrentSetting: true\r\n                    },\r\n                    maxInput: {\r\n                        ...state.maxInput,\r\n                        inputValue: `${state.maxCounter}`,\r\n                        lastRealValue: `${state.maxCounter}`,\r\n                        isInputFocused: false,\r\n                        isValueEqualToCurrentSetting: true\r\n                    }\r\n                }\r\n            } else return {\r\n                ...state,\r\n                isSettingsOpened: !state.isSettingsOpened,\r\n            };\r\n        case SET_VALUES:\r\n            return {\r\n                ...state,\r\n                counter: state.minInput.inputValue === '' ? +state.minInput.lastRealValue : +state.minInput.inputValue,\r\n                minCounter: state.minInput.inputValue === '' ? +state.minInput.lastRealValue : +state.minInput.inputValue,\r\n                maxCounter: state.maxInput.inputValue === '' ? +state.maxInput.lastRealValue : +state.maxInput.inputValue,\r\n                isSettingButtonNotReady: true,\r\n                minInput: {...state.minInput, isValueEqualToCurrentSetting: true},\r\n                maxInput: {...state.maxInput, isValueEqualToCurrentSetting: true},\r\n                isSettingsOpened: !state.isFirstVersion ? false : state.isSettingsOpened\r\n            };\r\n        case UPDATE_VALUES_FROM_MIN:\r\n            let minValue = action.event.currentTarget.value;\r\n            if (+minValue > 999) return state;\r\n            let newMinState = {...state, minInput: {...state.minInput, inputValue: minValue}};\r\n            if ((state.minCounter === +minValue &&\r\n                state.maxCounter === +state.maxInput.lastRealValue) ||\r\n                (minValue === '' && (+state.minInput.lastRealValue === state.minCounter))) {\r\n                newMinState = {...newMinState, isSettingButtonNotReady: true}\r\n            } else newMinState = {...newMinState, isSettingButtonNotReady: false};\r\n            if (+state.maxInput.lastRealValue <= +minValue || +minValue < 0) {\r\n                newMinState = {...newMinState, isNumberValuesNotValid: true}\r\n            } else newMinState = {...newMinState, isNumberValuesNotValid: false};\r\n            if (+minValue === state.minCounter ||\r\n                (minValue === '' && (+state.minInput.lastRealValue === state.minCounter))) {\r\n                newMinState = {\r\n                    ...newMinState,\r\n                    minInput: {\r\n                        ...newMinState.minInput,\r\n                        isValueEqualToCurrentSetting: true\r\n                    }\r\n                };\r\n            } else newMinState = {\r\n                ...newMinState,\r\n                minInput: {\r\n                    ...newMinState.minInput,\r\n                    isValueEqualToCurrentSetting: false\r\n                }\r\n            };\r\n            return newMinState;\r\n        case UPDATE_VALUES_FROM_MAX:\r\n            let maxValue = action.event.currentTarget.value;\r\n            if (+maxValue > 999) return state;\r\n            let newMaxState = {...state, maxInput: {...state.maxInput, inputValue: maxValue}};\r\n            if ((state.maxCounter === +maxValue &&\r\n                state.minCounter === +state.minInput.lastRealValue) ||\r\n                (maxValue === '' && (+state.maxInput.lastRealValue === state.maxCounter))) {\r\n                newMaxState = {...newMaxState, isSettingButtonNotReady: true}\r\n            } else newMaxState = {...newMaxState, isSettingButtonNotReady: false};\r\n            if (+maxValue <= +state.minInput.lastRealValue || +maxValue < 0) {\r\n                newMaxState = {...newMaxState, isNumberValuesNotValid: true}\r\n            } else newMaxState = {...newMaxState, isNumberValuesNotValid: false};\r\n            if (+maxValue === state.maxCounter ||\r\n                (maxValue === '' && (+state.maxInput.lastRealValue === state.maxCounter))) {\r\n                newMaxState = {\r\n                    ...newMaxState,\r\n                    maxInput: {\r\n                        ...newMaxState.maxInput,\r\n                        isValueEqualToCurrentSetting: true\r\n                    }\r\n                };\r\n            } else newMaxState = {\r\n                ...newMaxState,\r\n                maxInput: {\r\n                    ...newMaxState.maxInput,\r\n                    isValueEqualToCurrentSetting: false\r\n                }\r\n            };\r\n            return newMaxState;\r\n        case ON_FOCUS_MIN:\r\n            return {\r\n                ...state,\r\n                minInput: {\r\n                    ...state.minInput,\r\n                    inputValue: '',\r\n                    isInputFocused: true\r\n                }\r\n            };\r\n        case ON_FOCUS_MAX:\r\n            return {\r\n                ...state,\r\n                maxInput: {\r\n                    ...state.maxInput,\r\n                    inputValue: '',\r\n                    isInputFocused: true\r\n                }\r\n            };\r\n        case ON_BLUR_MIN:\r\n            let currentMinValue = state.minInput.inputValue;\r\n            if (currentMinValue === '') {\r\n                return {\r\n                    ...state,\r\n                    minInput: {\r\n                        ...state.minInput,\r\n                        isInputFocused: false\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    minInput: {\r\n                        ...state.minInput,\r\n                        lastRealValue: currentMinValue,\r\n                        isInputFocused: false,\r\n                    }\r\n                }\r\n            }\r\n        case ON_BLUR_MAX:\r\n            let currentMaxValue = state.maxInput.inputValue;\r\n            if (currentMaxValue === '') {\r\n                return {\r\n                    ...state,\r\n                    maxInput: {\r\n                        ...state.maxInput,\r\n                        isInputFocused: false\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    maxInput: {\r\n                        ...state.maxInput,\r\n                        lastRealValue: currentMaxValue,\r\n                        isInputFocused: false,\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const incrementAC = () => {\r\n    return {type: INCREMENT}\r\n};\r\nexport const resetAC = () => {\r\n    return {type: RESET}\r\n};\r\nexport const switchVersionAC = () => {\r\n    return {type: SWITCH_VERSION}\r\n};\r\nexport const openAndCloseSettingsAC = () => {\r\n    return {type: OPEN_AND_CLOSE_SETTINGS}\r\n};\r\nexport const setValuesAC = () => {\r\n    return {type: SET_VALUES}\r\n};\r\nexport const updateValuesFromMinAC = (event) => {\r\n    return {type: UPDATE_VALUES_FROM_MIN, event}\r\n};\r\nexport const updateValuesFromMaxAC = (event) => {\r\n    return {type: UPDATE_VALUES_FROM_MAX, event}\r\n};\r\nexport const onFocusMinAC = () => {\r\n    return {type: ON_FOCUS_MIN}\r\n};\r\nexport const onFocusMaxAC = () => {\r\n    return {type: ON_FOCUS_MAX}\r\n};\r\nexport const onBlurMinAC = () => {\r\n    return {type: ON_BLUR_MIN}\r\n};\r\nexport const onBlurMaxAC = () => {\r\n    return {type: ON_BLUR_MAX}\r\n};\r\n\r\n\r\nexport default reducer;","import React from 'react';\r\nimport '../../Assets/App.sass';\r\n\r\nconst VersionSwitcher = (props) => {\r\n\r\n    return (\r\n\r\n        <div className={props.isFirstVersion ? 'verSwitcher' : 'verSwitcher secondVersion'}\r\n             onClick={props.switchVersion}>\r\n            <span className={'currentVersionIsOne'}>1st version</span>\r\n            <span className={'currentVersionIsTwo'}>2nd version</span>\r\n            <div className={'switcher'}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VersionSwitcher\r\n\r\n","import React from 'react';\r\nimport '../../Assets/App.sass';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CounterDisplay = (props) => {\r\n\r\n    const svgClass = props.alertMonitor ? 'text-copy' : 'text-copy-alert';\r\n\r\n    return (\r\n        <div className={'counterDisplay'}>\r\n            <div className={props.alertMonitor ? 'number' : 'number alertNumber'}>\r\n                {props.isFirstVersion ? props.counterNumber :\r\n                    <svg viewBox=\"0 0 960 600\">\r\n                        <symbol id=\"s-text\">\r\n                            <text textAnchor=\"middle\" x=\"50%\" y=\"80%\">{props.counterNumber}</text>\r\n                        </symbol>\r\n                        <g className=\"g-ants\">\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}/>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}/>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}/>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}/>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}/>\r\n                        </g>\r\n                    </svg>}\r\n            </div>\r\n            <div className={'flex'}>\r\n                <div className={'currentSettings'}>Current min value:\r\n                    <div className={'currSetVal'}>{props.minValue}</div>\r\n                </div>\r\n                <div className={'currentSettings'}>Current max value:\r\n                    <div className={'currSetVal'}>{props.maxValue}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        maxValue: state.maxCounter,\r\n        minValue: state.minCounter,\r\n        counterNumber: state.counter\r\n    }\r\n};\r\n\r\nconst ConnectedCounterDisplay = connect(mapStateToProps, null)(CounterDisplay);\r\n\r\nexport default ConnectedCounterDisplay;","import React from 'react';\r\nimport '../../Assets/App.sass';\r\n\r\nconst ControlButton = (props) => {\r\n\r\n    return (\r\n        <button onClick={props.onClickHandler} disabled={props.disableMonitor}>\r\n            {props.buttonProperty}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default ControlButton;","import React from 'react';\r\nimport '../../Assets/App.sass';\r\nimport CounterDisplay from \"./counterDisplay\";\r\nimport ControlButton from \"./buttons\";\r\nimport {incrementAC, openAndCloseSettingsAC, resetAC} from \"../../redux/reducer\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n        <div className={!props.isFirstVersion && props.isSettingsOpened ? 'counter displayNone' : 'counter'}>\r\n            <CounterDisplay counterNumber={props.counterNumber} maxValue={props.maxValue} minValue={props.minValue}\r\n                            alertMonitor={props.counterNumber !== props.maxValue}\r\n                            isFirstVersion={props.isFirstVersion}/>\r\n            <div className={'counterButtons'}>\r\n                <ControlButton buttonProperty={'increment'} onClickHandler={props.increment}\r\n                               disableMonitor={props.counterNumber === props.maxValue}/>\r\n                <ControlButton buttonProperty={'reset'} onClickHandler={props.reset}\r\n                               disableMonitor={props.counterNumber === props.minValue}/>\r\n                {!props.isFirstVersion &&\r\n                <ControlButton buttonProperty={'Settings'} onClickHandler={props.openAndCloseSettings}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        isSettingsOpened: state.isSettingsOpened,\r\n        maxValue: state.maxCounter,\r\n        minValue: state.minCounter,\r\n        counterNumber: state.counter\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        openAndCloseSettings: () => {\r\n            const action = openAndCloseSettingsAC();\r\n            dispatch(action)\r\n        },\r\n        increment: () => {\r\n            const action = incrementAC();\r\n            dispatch(action)\r\n        },\r\n        reset: () => {\r\n            const action = resetAC();\r\n            dispatch(action)\r\n        },\r\n    }\r\n};\r\n\r\nconst ConnectedCounter = connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n\r\nexport default ConnectedCounter;\r\n","import React from 'react';\r\nimport '../../Assets/App.sass';\r\n\r\nconst SettingsInput = (props) => {\r\n\r\n    const isFocused = props.data.isInputFocused,\r\n        isEqual = props.data.isValueEqualToCurrentSetting,\r\n        valueName = props.inputName,\r\n        realValue = props.data.lastRealValue;\r\n\r\n    const labelContent = !isFocused && isEqual ? `Type ${valueName} here` : isEqual && isFocused &&\r\n    props.data.inputValue === realValue ?\r\n        `This ${valueName} is equal to current` : isFocused ? `${valueName}` : `${valueName} will be set: `;\r\n\r\n    return (\r\n        <div className={'inputContainer'}>\r\n            <input className={'optionsInput'} type={'number'}\r\n                   id={`${props.id}`}\r\n                   onFocus={props.focus}\r\n                   onBlur={props.blur}\r\n                   value={props.data.inputValue}\r\n                   onChange={props.change}\r\n            />\r\n            <label className={'inputName'} htmlFor={`${props.id}`}>\r\n                <div className={'labelWrapper'}>\r\n                    <span>{labelContent}</span>\r\n                    <span className={(props.data.isInputFocused || props.data.isValueEqualToCurrentSetting) ?\r\n                        'displayNone lastRealValue' : 'lastRealValue'}>\r\n                        {props.data.lastRealValue}\r\n                    </span>\r\n                </div>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsInput;","import React from 'react';\r\nimport '../../Assets/App.sass';\r\nimport ControlButton from \"../CounterBody/buttons\";\r\nimport SettingsInput from \"./SettingsInput\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    onBlurMaxAC,\r\n    onBlurMinAC,\r\n    onFocusMaxAC,\r\n    onFocusMinAC,\r\n    openAndCloseSettingsAC,\r\n    setValuesAC,\r\n    updateValuesFromMaxAC,\r\n    updateValuesFromMinAC\r\n} from \"../../redux/reducer\";\r\n\r\nconst Settings = (props) => {\r\n\r\n    const alertMessage = +props.maxInput.inputValue < 0 || props.minInput.inputValue < 0 ? `! values can't be less than zero !` :\r\n        (props.maxInput.inputValue || props.maxInput.lastRealValue) === (props.minInput.inputValue || props.minInput.lastRealValue) ?\r\n            `! values can't be equal !` :\r\n            +props.maxInput.inputValue < props.minInput.inputValue || +props.maxInput.lastRealValue < props.minInput.inputValue ||\r\n            +props.maxInput.inputValue < props.minInput.lastRealValue ? `! minValue can't be greater than maxValue !` : false;\r\n\r\n    return (\r\n        <div className={props.isFirstVersion || (props.isSettingsOpened && !props.isFirstVersion) ?\r\n            'settings' : 'settings displayNone'}>\r\n            <div className={'settingsInputs'}>\r\n                <SettingsInput blur={props.onBlurMinHandler}\r\n                               data={props.minInput} inputName={'min value'}\r\n                               id={'minInput'}\r\n                               change={(e) => {\r\n                                   props.updateValuesFromMin(e)\r\n                               }}\r\n                               focus={props.onFocusMinHandler}\r\n                               isFirstVersion={props.isFirstVersion}\r\n                />\r\n                <SettingsInput blur={props.onBlurMaxHandler}\r\n                               data={props.maxInput} inputName={'max value'}\r\n                               id={'maxInput'}\r\n                               change={(e) => {\r\n                                   props.updateValuesFromMax(e)\r\n                               }}\r\n                               focus={props.onFocusMaxHandler}\r\n                               isFirstVersion={props.isFirstVersion}\r\n                />\r\n            </div>\r\n            <div className={'counterButtons'}>\r\n                <ControlButton onClickHandler={props.setValues}\r\n                               buttonProperty={'set options'}\r\n                               disableMonitor={props.isSettingButtonNotReady || props.isNumberValuesNotValid}\r\n                />\r\n                {!props.isFirstVersion &&\r\n                <ControlButton onClickHandler={props.openAndCloseSettings} buttonProperty={'cancel'}/>}\r\n            </div>\r\n            <div className={props.isNumberValuesNotValid ? 'alertMessage' : 'alertMessage opacityZero'}>\r\n                {alertMessage}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        isSettingsOpened: state.isSettingsOpened,\r\n        isSettingButtonNotReady: state.isSettingButtonNotReady,\r\n        isNumberValuesNotValid: state.isNumberValuesNotValid,\r\n        minInput: state.minInput,\r\n        maxInput: state.maxInput,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        openAndCloseSettings: () => {\r\n            const action = openAndCloseSettingsAC();\r\n            dispatch(action)\r\n        },\r\n        setValues: () => {\r\n            const action = setValuesAC();\r\n            dispatch(action)\r\n        },\r\n        updateValuesFromMin: (e) => {\r\n            const action = updateValuesFromMinAC(e);\r\n            dispatch(action)\r\n        },\r\n        updateValuesFromMax: (e) => {\r\n            const action = updateValuesFromMaxAC(e);\r\n            dispatch(action)\r\n        },\r\n        onBlurMinHandler: () => {\r\n            const action = onBlurMinAC();\r\n            dispatch(action)\r\n        },\r\n        onBlurMaxHandler: () => {\r\n            const action = onBlurMaxAC();\r\n            dispatch(action)\r\n        },\r\n        onFocusMinHandler: () => {\r\n            const action = onFocusMinAC();\r\n            dispatch(action)\r\n        },\r\n        onFocusMaxHandler: () => {\r\n            const action = onFocusMaxAC();\r\n            dispatch(action)\r\n        },\r\n    }\r\n};\r\n\r\nconst ConnectedSettings = connect(mapStateToProps, mapDispatchToProps)(Settings);\r\n\r\nexport default ConnectedSettings;","import React from 'react';\r\nimport '../../Assets/App.sass';\r\nimport Counter from \"./counter\";\r\nimport Settings from \"../Settings/Settings\";\r\n\r\nconst MainCounter = (props) => {\r\n\r\n    return(\r\n        <div className={props.isFirstVersion ? 'App' : 'App secondVersionApp'}>\r\n            <div className={'absoluteWrapper'}>\r\n                <div className={'theCounter'}>\r\n                    {!props.isSettingsOpened || props.isFirstVersion ? 'The Counter' : 'Settings'}\r\n                </div>\r\n                <div className={!props.isSettingsOpened ? 'wrapper' : 'wrapper settingsActive'}>\r\n                    <Counter />\r\n                    <Settings />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainCounter","import React from 'react';\r\nimport './Assets/App.sass';\r\nimport {connect} from \"react-redux\";\r\nimport {switchVersionAC} from \"./redux/reducer\";\r\nimport VersionSwitcher from \"./components/Settings/VersionSwitcher\";\r\nimport MainCounter from \"./components/CounterBody/MainCounter\";\r\n\r\nconst App = (props) => {\r\n\r\n    return (\r\n        <>\r\n           <VersionSwitcher isFirstVersion={props.isFirstVersion} switchVersion={props.switchVersion}/>\r\n           <MainCounter isFirstVersion={props.isFirstVersion} isSettingsOpened={props.isSettingsOpened}/>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isFirstVersion: state.isFirstVersion,\r\n        isSettingsOpened: state.isSettingsOpened\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        switchVersion: () => {\r\n            const action = switchVersionAC();\r\n            dispatch(action)\r\n        },\r\n    }\r\n};\r\n\r\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default ConnectedApp;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import reducer from \"./reducer\";\r\nimport {createStore} from \"redux\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}