{"version":3,"sources":["components/counterDisplay.jsx","components/buttons.jsx","components/counter.jsx","components/SettingsInput.jsx","components/Settings.jsx","App.js","serviceWorker.js","index.js"],"names":["CounterDisplay","props","svgClass","alertMonitor","className","isFirstVersion","counterNumber","viewBox","id","textAnchor","x","y","xlinkHref","maxValue","minValue","ControlButton","onClick","onClickHandler","disabled","disableMonitor","buttonProperty","Counter","isSettingsOpened","setUnitToCounter","reset","openAndCloseSettings","SettingsInput","isFocused","data","isInputFocused","isEqual","isValueEqualToCurrentSetting","valueName","inputName","realValue","lastRealValue","labelContent","inputValue","type","onFocus","focus","onBlur","blur","value","onChange","change","htmlFor","Settings","alertMessage","maxInput","minInput","onBlurHandler","e","updateValuesFromInputs","onFocusHandler","setValues","isSettingButtonNotReady","isNumberValuesNotValid","App","state","counter","minCounter","maxCounter","setState","input","currentTarget","switchVersion","window","store","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91865277.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Assets/App.sass';\r\n\r\nconst CounterDisplay = (props) => {\r\n\r\n    let svgClass = props.alertMonitor ? 'text-copy' : 'text-copy-alert';\r\n\r\n    return (\r\n        <div className={'counterDisplay'}>\r\n            <div className={props.alertMonitor ? 'number' : 'number alertNumber'}>\r\n                {props.isFirstVersion ? props.counterNumber :\r\n                    <svg viewBox=\"0 0 960 600\">\r\n                        <symbol id=\"s-text\">\r\n                            <text textAnchor=\"middle\" x=\"50%\" y=\"80%\">{props.counterNumber}</text>\r\n                        </symbol>\r\n                        <g className=\"g-ants\">\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                            <use xlinkHref=\"#s-text\" className={svgClass}></use>\r\n                        </g>\r\n                    </svg>}\r\n            </div>\r\n            <div className={'flex'}>\r\n               <div className={'currentSettings'}>Current max value:\r\n                    <div className={'currSetVal'}>{props.maxValue}</div>\r\n                </div>\r\n                <div className={'currentSettings'}>Current min value:\r\n                    <div className={'currSetVal'}>{props.minValue}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CounterDisplay;","import React from 'react';\r\nimport '../Assets/App.sass';\r\n\r\nconst ControlButton = (props) => {\r\n    return(\r\n        <button onClick={props.onClickHandler} disabled={props.disableMonitor}>\r\n            {props.buttonProperty}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default ControlButton;","import React from 'react';\r\nimport '../Assets/App.sass';\r\nimport CounterDisplay from \"./counterDisplay\";\r\nimport ControlButton from \"./buttons\";\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n        <>\r\n            <div className={!props.isFirstVersion && props.isSettingsOpened ? 'counter displayNone' : 'counter'}>\r\n                <CounterDisplay counterNumber={props.counterNumber} maxValue={props.maxValue} minValue={props.minValue}\r\n                                alertMonitor={props.counterNumber !== props.maxValue} isFirstVersion={props.isFirstVersion}/>\r\n                <div className={'counterButtons'}>\r\n                    <ControlButton buttonProperty={'increment'} onClickHandler={props.setUnitToCounter}\r\n                                   disableMonitor={props.counterNumber === props.maxValue}/>\r\n                    <ControlButton buttonProperty={'reset'} onClickHandler={props.reset}\r\n                                   disableMonitor={props.counterNumber === props.minValue}/>\r\n                    {!props.isFirstVersion &&\r\n                    <ControlButton buttonProperty={'Settings'} onClickHandler={props.openAndCloseSettings}/>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport '../Assets/App.sass';\r\n\r\n\r\nconst SettingsInput = (props) => {\r\n\r\n    let isFocused = props.data.isInputFocused,\r\n        isEqual = props.data.isValueEqualToCurrentSetting,\r\n        valueName = props.inputName,\r\n        realValue = props.data.lastRealValue;\r\n\r\n    let labelContent = !isFocused && isEqual ? `Type ${valueName} here` : isEqual && isFocused &&\r\n    props.data.inputValue === realValue ?\r\n        `This ${valueName} is equal to current` : isFocused ? `${valueName}` : `${valueName} will be set: `;\r\n\r\n    return (\r\n        <div className={'inputContainer'}>\r\n            <input className={'optionsInput'} type={'number'}\r\n                   id={`${props.id}`}\r\n                   onFocus={props.focus}\r\n                   onBlur={props.blur}\r\n                   value={props.data.inputValue}\r\n                   onChange={props.change}\r\n            />\r\n            <label className={'inputName'} htmlFor={`${props.id}`}>\r\n                <div className={'labelWrapper'}>\r\n                    <span>{labelContent}</span>\r\n                    <span className={(props.data.isInputFocused || props.data.isValueEqualToCurrentSetting) ?\r\n                        'displayNone lastRealValue' : 'lastRealValue'}>\r\n                        {props.data.lastRealValue}\r\n                    </span>\r\n                </div>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SettingsInput;","import React from 'react';\r\nimport '../Assets/App.sass';\r\nimport ControlButton from \"./buttons\";\r\nimport SettingsInput from \"./SettingsInput\";\r\n\r\nconst Settings = (props) => {\r\n\r\n    let alertMessage = +props.maxInput.inputValue < 0 || props.minInput.inputValue < 0 ? `! values can't be less than zero !` :\r\n        (props.maxInput.inputValue || props.maxInput.lastRealValue) === (props.minInput.inputValue || props.minInput.lastRealValue) ? `! values can't be equal !` :\r\n        +props.maxInput.inputValue < props.minInput.inputValue || +props.maxInput.lastRealValue < props.minInput.inputValue ||\r\n        +props.maxInput.inputValue < props.minInput.lastRealValue ? `! minValue can't be greater than maxValue !` : false;\r\n\r\n    return (\r\n        <div className={props.isFirstVersion || (props.isSettingsOpened && !props.isFirstVersion) ?\r\n            'settings' : 'settings displayNone'}>\r\n            <div className={'settingsInputs'}>\r\n                <SettingsInput blur={() => props.onBlurHandler('maxInput')}\r\n                               data={props.maxInput} inputName={'max value'}\r\n                               id={'maxInput'}\r\n                               change={(e) => {\r\n                                   props.updateValuesFromInputs(e, 'maxInput')\r\n                               }}\r\n                               focus={() => props.onFocusHandler('maxInput')}\r\n                               isFirstVersion={props.isFirstVersion}\r\n                />\r\n                <SettingsInput blur={() => props.onBlurHandler('minInput')}\r\n                               data={props.minInput} inputName={'min value'}\r\n                               id={'minInput'}\r\n                               change={(e) => {\r\n                                   props.updateValuesFromInputs(e, 'minInput')\r\n                               }}\r\n                               focus={() => props.onFocusHandler('minInput')}\r\n                               isFirstVersion={props.isFirstVersion}\r\n                />\r\n            </div>\r\n            <div className={'counterButtons'}>\r\n                <ControlButton onClickHandler={props.setValues}\r\n                               buttonProperty={'set options'}\r\n                               disableMonitor={(props.isSettingButtonNotReady ||\r\n                                   props.isNumberValuesNotValid)}\r\n                />\r\n                {!props.isFirstVersion &&\r\n                <ControlButton onClickHandler={props.openAndCloseSettings} buttonProperty={'cancel'}/>}\r\n            </div>\r\n            <div className={props.isNumberValuesNotValid ? 'alertMessage' : 'alertMessage opacityZero'}>\r\n                {alertMessage}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Settings;","import React from 'react';\r\nimport './Assets/App.sass';\r\nimport Counter from \"./components/counter\";\r\nimport Settings from \"./components/Settings\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        counter: 0,\r\n        minCounter: 0,\r\n        maxCounter: 99,\r\n        isSettingButtonNotReady: true,\r\n        isNumberValuesNotValid: false,\r\n        minInput: {\r\n            inputValue: '0',\r\n            lastRealValue: '0',\r\n            isInputFocused: false,\r\n            isValueEqualToCurrentSetting: true\r\n        },\r\n        maxInput: {\r\n            inputValue: '99',\r\n            lastRealValue: '99',\r\n            isInputFocused: false,\r\n            isValueEqualToCurrentSetting: true\r\n        },\r\n        isFirstVersion: true,\r\n        isSettingsOpened: false\r\n    };\r\n\r\n    setUnitToCounter = () => {\r\n        this.setState({counter: this.state.counter + 1});\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({counter: this.state.minCounter})\r\n    };\r\n\r\n    setValues = () => {\r\n        this.setState({\r\n            counter: this.state.minInput.inputValue === '' ? +this.state.minInput.lastRealValue : +this.state.minInput.inputValue,\r\n            minCounter: this.state.minInput.inputValue === '' ? +this.state.minInput.lastRealValue : +this.state.minInput.inputValue,\r\n            maxCounter: this.state.maxInput.inputValue === '' ? +this.state.maxInput.lastRealValue : +this.state.maxInput.inputValue,\r\n            isSettingButtonNotReady: true,\r\n            minInput: {...this.state.minInput, isValueEqualToCurrentSetting: true},\r\n            maxInput: {...this.state.maxInput, isValueEqualToCurrentSetting: true}\r\n        });\r\n        if (!this.state.isFirstVersion) this.setState({isSettingsOpened: false});\r\n    };\r\n\r\n    updateValuesFromInputs = (e, input) => {\r\n        let value = e.currentTarget.value;\r\n        switch (input) {\r\n            case 'maxInput':\r\n                this.setState({maxInput: {...this.state.maxInput, inputValue: value}});\r\n                if ((this.state.maxCounter === +value &&\r\n                    this.state.minCounter === +this.state.minInput.lastRealValue) ||\r\n                    (value === '' && (+this.state.maxInput.lastRealValue === this.state.maxCounter))) {\r\n                    this.setState({isSettingButtonNotReady: true})\r\n                } else this.setState({isSettingButtonNotReady: false});\r\n                if (+value <= +this.state.minInput.lastRealValue || +value < 0) {\r\n                    this.setState({isNumberValuesNotValid: true})\r\n                } else this.setState({isNumberValuesNotValid: false});\r\n                if (+value === this.state.maxCounter ||\r\n                    (value === '' && (+this.state.maxInput.lastRealValue === this.state.maxCounter))) {\r\n                    this.setState({\r\n                        maxInput: {\r\n                            ...this.state.maxInput,\r\n                            inputValue: value,\r\n                            isValueEqualToCurrentSetting: true\r\n                        }\r\n                    });\r\n                } else this.setState({\r\n                    maxInput: {\r\n                        ...this.state.maxInput,\r\n                        inputValue: value,\r\n                        isValueEqualToCurrentSetting: false\r\n                    }\r\n                });\r\n                break;\r\n            case 'minInput':\r\n                this.setState({minInput: {...this.state.minInput, inputValue: value}});\r\n                if ((this.state.minCounter === +value &&\r\n                    this.state.maxCounter === +this.state.maxInput.lastRealValue) ||\r\n                    (value === '' && (+this.state.minInput.lastRealValue === this.state.minCounter))) {\r\n                    this.setState({isSettingButtonNotReady: true})\r\n                } else this.setState({isSettingButtonNotReady: false});\r\n                if (+this.state.maxInput.lastRealValue <= +value || +value < 0) {\r\n                    this.setState({isNumberValuesNotValid: true})\r\n                } else this.setState({isNumberValuesNotValid: false});\r\n                if (+value === this.state.minCounter ||\r\n                    (value === '' && (+this.state.minInput.lastRealValue === this.state.minCounter))) {\r\n                    this.setState({\r\n                        minInput: {\r\n                            ...this.state.minInput,\r\n                            inputValue: value,\r\n                            isValueEqualToCurrentSetting: true\r\n                        }\r\n                    });\r\n                } else this.setState({\r\n                    minInput: {\r\n                        ...this.state.minInput,\r\n                        inputValue: value,\r\n                        isValueEqualToCurrentSetting: false\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    };\r\n\r\n    onFocusHandler = (input) => {\r\n        switch (input) {\r\n            case 'maxInput':\r\n                this.setState({\r\n                    maxInput: {\r\n                        ...this.state.maxInput,\r\n                        inputValue: '',\r\n                        isInputFocused: true\r\n                    }\r\n                });\r\n                break;\r\n            case 'minInput':\r\n                this.setState({\r\n                    minInput: {\r\n                        ...this.state.minInput,\r\n                        inputValue: '',\r\n                        isInputFocused: true\r\n                    }\r\n                });\r\n                break;\r\n        }\r\n    };\r\n\r\n    onBlurHandler = (input) => {\r\n        switch (input) {\r\n            case 'maxInput':\r\n                let maxValue = this.state.maxInput.inputValue;\r\n                if (maxValue === '') {\r\n                    this.setState({\r\n                        maxInput: {\r\n                            ...this.state.maxInput,\r\n                            isInputFocused: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        maxInput: {\r\n                            ...this.state.maxInput,\r\n                            lastRealValue: maxValue,\r\n                            isInputFocused: false,\r\n                        }\r\n                    })\r\n                }\r\n                break;\r\n            case 'minInput':\r\n                let minValue = this.state.minInput.inputValue;\r\n                if (minValue === '') {\r\n                    this.setState({\r\n                        minInput: {\r\n                            ...this.state.minInput,\r\n                            isInputFocused: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        minInput: {\r\n                            ...this.state.minInput,\r\n                            lastRealValue: minValue,\r\n                            isInputFocused: false,\r\n                        }\r\n                    })\r\n                }\r\n                break;\r\n        }\r\n    };\r\n\r\n    switchVersion = () => {\r\n        this.setState({isFirstVersion: !this.state.isFirstVersion});\r\n    };\r\n\r\n    openAndCloseSettings = () => {\r\n        this.setState({isSettingsOpened: !this.state.isSettingsOpened})\r\n    };\r\n\r\n    render() {\r\n        window.store = this.state;\r\n        return (\r\n            <>\r\n                <div className={this.state.isFirstVersion ? 'verSwitcher' : 'verSwitcher secondVersion'}\r\n                     onClick={this.switchVersion}>\r\n                    <span className={'currentVersionIsOne'}>1st version</span>\r\n                    <span className={'currentVersionIsTwo'}>2nd version</span>\r\n                    <div className={'switcher'}/>\r\n                </div>\r\n                <div className={this.state.isFirstVersion ? 'App' : 'App secondVersionApp'}>\r\n                    <div className={'absoluteWrapper'}>\r\n                        <div className={'theCounter'}>\r\n                            {!this.state.isSettingsOpened || this.state.isFirstVersion ? 'The Counter' : 'Settings'}\r\n                        </div>\r\n                        <div className={!this.state.isSettingsOpened ?\r\n                            'wrapper' : 'wrapper settingsActive'}>\r\n                            <Counter counterNumber={this.state.counter} minValue={this.state.minCounter}\r\n                                     maxValue={this.state.maxCounter}\r\n                                     setUnitToCounter={this.setUnitToCounter} reset={this.reset}\r\n                                     openAndCloseSettings={this.openAndCloseSettings}\r\n                                     isFirstVersion={this.state.isFirstVersion}\r\n                                     isSettingsOpened={this.state.isSettingsOpened}\r\n                            />\r\n                            <Settings setValues={this.setValues}\r\n                                      updateValuesFromInputs={this.updateValuesFromInputs}\r\n                                      isNumberValuesNotValid={this.state.isNumberValuesNotValid}\r\n                                      isSettingButtonNotReady={this.state.isSettingButtonNotReady}\r\n                                      onFocusHandler={this.onFocusHandler}\r\n                                      onBlurHandler={this.onBlurHandler}\r\n                                      maxInput={this.state.maxInput} minInput={this.state.minInput}\r\n                                      isSettingsOpened={this.state.isSettingsOpened}\r\n                                      openAndCloseSettings={this.openAndCloseSettings}\r\n                                      isFirstVersion={this.state.isFirstVersion}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}